@using car_rental.Application.DTOs.Deal
@using car_rental.Application.DTOs.Filter
@model PrimaryFilterDTO
@{
	ViewData["Title"] = "Home Page";
}

<div class="text-center">
	<h1 class="display-4">Welcome</h1>
	<p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<form asp-action="FindDeals" asp-controller="Home" enctype="multipart/form-data" method="post" class="mb-5">
	<div class="row justify-content-around">
		<div class="col-md-4 mt-3">

			<h3 class="text-success fw-bolder mb-3" id="formTitle">
				<i class="bi bi-plus-circle-dotted"></i>
				Find Deals
			</h3>

			<div class="form-group">
				<label asp-for="Address" class="form-label fw-bolder"></label>
				<input type="text" class="form-control" asp-for="Address" placeholder="write an Airport or a Location" required />
				<span asp-validation-for="Address" class=" text-danger"></span>
			</div>

			<div class="form-group mt-3">
				<label asp-for="StartDate" class="form-label fw-bolder"></label>
				<input type="date" class="form-control" asp-for="StartDate" id="startDateInput" required placeholder="enter the pick-up date"/>
				<span asp-validation-for="StartDate" class="text-danger"></span>
			</div>

			<div class="form-group mt-3">
				<label asp-for="EndDate" class="form-label fw-bolder"></label>
				<input type="date" class="form-control" asp-for="EndDate" id="endDateInput" required placeholder="enter the dropp-off date"/>
				<span asp-validation-for="EndDate" class="text-danger"></span>
			</div>

			<button type="submit"
					class="btn btn-success mt-4">
				Find Deals
			</button>
		</div>
	</div>
</form>


@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const startDateInput = document.getElementById('startDateInput');
			const endDateInput = document.getElementById('endDateInput');

			// Calculate 180 days from today
			const maxDate = new Date();
			maxDate.setDate(maxDate.getDate() + 180);

			// Initialize Flatpickr for Start Date
			const fpStartDate = flatpickr(startDateInput, {
				dateFormat: "Y-m-d", // Format matching C# DateOnly.ToString("yyyy-MM-dd")
				minDate: "today",
				maxDate: maxDate,
				onClose: function (selectedDates, dateStr, instance) {
					if (selectedDates.length > 0) {
						// When start date is selected/changed, update end date's minDate
						fpEndDate.set('minDate', selectedDates[0]);

						// If end date is now before the new start date, clear it or adjust it
						if (fpEndDate.selectedDates.length > 0 && fpEndDate.selectedDates[0] < selectedDates[0]) {
							fpEndDate.clear(); // Clear the end date if it's invalid
							endDateInput.setCustomValidity('Drop-Off Date must be on or after Pick-Up Date.');
						} else {
							endDateInput.setCustomValidity(''); // Clear custom validation message if valid
						}
					}
				}
			});

			// Initialize Flatpickr for End Date
			const fpEndDate = flatpickr(endDateInput, {
				dateFormat: "Y-m-d", // Format matching C# DateOnly.ToString("yyyy-MM-dd")
				minDate: "today", // Initial minDate, will be updated by startDate
				maxDate: maxDate,
				onClose: function (selectedDates, dateStr, instance) {
					if (selectedDates.length > 0 && fpStartDate.selectedDates.length > 0) {
						// Live validation: End Date must be >= Start Date
						if (selectedDates[0] < fpStartDate.selectedDates[0]) {
							endDateInput.setCustomValidity('Drop-Off Date must be on or after Pick-Up Date.');
						} else {
							endDateInput.setCustomValidity(''); // Clear custom validation message if valid
						}
					} else if (selectedDates.length > 0 && fpStartDate.selectedDates.length === 0) {
						// If end date is picked but start date isn't, ensure end date is valid relative to today
						endDateInput.setCustomValidity('');
					}
				}
			});

			// Initial check in case values are pre-filled by the model
			// This ensures the minDate for EndDate is set correctly on page load
			if (startDateInput.value) {
				const initialStartDate = new Date(startDateInput.value);
				fpEndDate.set('minDate', initialStartDate);
			}

			// Add an input event listener to the endDateInput to clear validation messages
			// if the user types something invalid
			endDateInput.addEventListener('input', function() {
				if (endDateInput.value) {
					endDateInput.setCustomValidity('');
				}
			});

		});
	</script>
}